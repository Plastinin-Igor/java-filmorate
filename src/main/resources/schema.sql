-- genre definition

-- Drop table

-- DROP TABLE genre;

CREATE TABLE IF NOT EXISTS genre (
	genre_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Идентификатор жанра
	genre_name varchar(50) NOT NULL, -- Жанр
	CONSTRAINT genre_pk PRIMARY KEY (genre_id),
	CONSTRAINT genre_uk UNIQUE (genre_name)
);
COMMENT ON TABLE genre IS 'Жанры';

-- Column comments

COMMENT ON COLUMN genre.genre_id IS 'Идентификатор жанра';
COMMENT ON COLUMN genre.genre_name IS 'Жанр';


-- rating definition

-- Drop table

-- DROP TABLE rating;

CREATE TABLE IF NOT EXISTS rating (
	rating_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Идентификатор рейтинга
	rating varchar(15) NOT NULL, -- Рейтинг
	description varchar(50) NULL, -- Описание
	CONSTRAINT rating_pk PRIMARY KEY (rating_id),
	CONSTRAINT rating_uk UNIQUE (rating)
);
COMMENT ON TABLE rating IS 'Рейтинг Ассоциации кинокомпаний (Motion Picture Association - МРА)';

-- Column comments

COMMENT ON COLUMN rating.rating_id IS 'Идентификатор рейтинга';
COMMENT ON COLUMN rating.rating IS 'Рейтинг';
COMMENT ON COLUMN rating.description IS 'Описание';


-- "user" definition

-- Drop table

-- DROP TABLE "user";

CREATE TABLE IF NOT EXISTS "user" (
	user_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор пользователя
	email varchar(50) NOT NULL, -- Адрес электронной почты
	login varchar(50) NOT NULL, -- Логин пользователя
	name varchar(150) NOT NULL, -- Имя пользователя
	birthday date NOT NULL, -- Дата рождения
	CONSTRAINT user_email_uk UNIQUE (email),
	CONSTRAINT user_login_uk UNIQUE (login),
	CONSTRAINT user_pk PRIMARY KEY (user_id)
);
COMMENT ON TABLE "user" IS 'Пользователи';

-- Column comments

COMMENT ON COLUMN "user".user_id IS 'Уникальный идентификатор пользователя';
COMMENT ON COLUMN "user".email IS 'Адрес электронной почты';
COMMENT ON COLUMN "user".login IS 'Логин пользователя';
COMMENT ON COLUMN "user".name IS 'Имя пользователя';
COMMENT ON COLUMN "user".birthday IS 'Дата рождения';


-- film definition

-- Drop table

-- DROP TABLE film;

CREATE TABLE IF NOT EXISTS film (
	film_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор фильма
	name varchar(150) NOT NULL, -- Название фильма
	description varchar(200) NULL, -- Описание фильма
	releasedate date NOT NULL, -- Дата релиза
	duration int4 NOT NULL, -- Продолжительность фильма
	rating int4 NOT NULL DEFAULT 0, -- Рейтинг
	CONSTRAINT film_name_release_date_uk UNIQUE (name, releasedate),
	CONSTRAINT film_pk PRIMARY KEY (film_id),
	CONSTRAINT film_fk FOREIGN KEY (rating) REFERENCES rating(rating_id)
);
COMMENT ON TABLE film IS 'Фильмы';

-- Column comments

COMMENT ON COLUMN film.film_id IS 'Уникальный идентификатор фильма';
COMMENT ON COLUMN film.name IS 'Название фильма';
COMMENT ON COLUMN film.description IS 'Описание фильма';
COMMENT ON COLUMN film.releasedate IS 'Дата релиза';
COMMENT ON COLUMN film.duration IS 'Продолжительность фильма';
COMMENT ON COLUMN film.rating IS 'Рейтинг';


-- film_genre definition

-- Drop table

-- DROP TABLE film_genre;

CREATE TABLE IF NOT EXISTS film_genre (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор
	film_id int4 NOT NULL, -- Фильм
	genre_id int4 NOT NULL, -- Жанр
	CONSTRAINT film_genre_pk PRIMARY KEY (id),
	CONSTRAINT film_genre_uk UNIQUE (film_id, genre_id),
	CONSTRAINT film_genre_film_fk FOREIGN KEY (film_id) REFERENCES film(film_id),
	CONSTRAINT film_genre_genre_fk FOREIGN KEY (genre_id) REFERENCES genre(genre_id)
);
COMMENT ON TABLE film_genre IS 'Жанры фильмов';

-- Column comments

COMMENT ON COLUMN film_genre.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN film_genre.film_id IS 'Фильм';
COMMENT ON COLUMN film_genre.genre_id IS 'Жанр';


-- friends definition

-- Drop table

-- DROP TABLE friends;

CREATE TABLE IF NOT EXISTS friends (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор
	user_id int4 NOT NULL, -- Пользователь
	friend_id int4 NOT NULL, -- Друг
	sign_friendship bool NOT NULL DEFAULT false, -- Признак подтверждения дружбы
	CONSTRAINT friends_pk PRIMARY KEY (id),
	CONSTRAINT friends_friend_fk FOREIGN KEY (friend_id) REFERENCES "user"(user_id),
	CONSTRAINT friends_user_fk FOREIGN KEY (user_id) REFERENCES "user"(user_id)
);
COMMENT ON TABLE friends IS 'Друзья';

-- Column comments

COMMENT ON COLUMN friends.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN friends.user_id IS 'Пользователь';
COMMENT ON COLUMN friends.friend_id IS 'Друг';
COMMENT ON COLUMN friends.sign_friendship IS 'Признак подтверждения дружбы';


-- likes definition

-- Drop table

-- DROP TABLE likes;

CREATE TABLE IF NOT EXISTS likes (
	likes_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор
	film_id int4 NOT NULL, -- Идентификатор фильма
	user_id int4 NOT NULL, -- Идентификатор пользователя
	CONSTRAINT likes_pk PRIMARY KEY (likes_id),
	CONSTRAINT likes_film_fk FOREIGN KEY (film_id) REFERENCES film(film_id),
	CONSTRAINT likes_user_fk FOREIGN KEY (user_id) REFERENCES "user"(user_id)
);
COMMENT ON TABLE likes IS 'Лайки';

-- Column comments

COMMENT ON COLUMN likes.likes_id IS 'Уникальный идентификатор';
COMMENT ON COLUMN likes.film_id IS 'Идентификатор фильма';
COMMENT ON COLUMN likes.user_id IS 'Идентификатор пользователя';
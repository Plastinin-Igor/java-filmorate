-- genre definition

-- Drop table

-- DROP TABLE genre;

create TABLE IF NOT EXISTS genre (
	genre_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Идентификатор жанра
	genre_name varchar(50) NOT NULL, -- Жанр
	CONSTRAINT genre_pk PRIMARY KEY (genre_id),
	CONSTRAINT genre_uk UNIQUE (genre_name)
);
comment on table genre is 'Жанры';

-- Column comments

comment on column genre.genre_id is 'Идентификатор жанра';
comment on column genre.genre_name is 'Жанр';


-- rating definition

-- Drop table

-- DROP TABLE rating;

create TABLE IF NOT EXISTS rating (
	rating_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Идентификатор рейтинга
	rating varchar(15) NOT NULL, -- Рейтинг
	description varchar(50) NULL, -- Описание
	CONSTRAINT rating_pk PRIMARY KEY (rating_id),
	CONSTRAINT rating_uk UNIQUE (rating)
);
comment on table rating is 'Рейтинг Ассоциации кинокомпаний (Motion Picture Association - МРА)';

-- Column comments

comment on column rating.rating_id is 'Идентификатор рейтинга';
comment on column rating.rating is 'Рейтинг';
comment on column rating.description is 'Описание';


-- users definition

-- Drop table

-- DROP TABLE users;

create TABLE IF NOT EXISTS users (
	user_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор пользователя
	email varchar(50) NOT NULL, -- Адрес электронной почты
	login varchar(50) NOT NULL, -- Логин пользователя
	name varchar(150) NOT NULL, -- Имя пользователя
	birthday date NOT NULL, -- Дата рождения
	CONSTRAINT user_email_uk UNIQUE (email),
	CONSTRAINT user_login_uk UNIQUE (login),
	CONSTRAINT user_pk PRIMARY KEY (user_id)
);
comment on table users is 'Пользователи';

-- Column comments

comment on column users.user_id is 'Уникальный идентификатор пользователя';
comment on column users.email is 'Адрес электронной почты';
comment on column users.login is 'Логин пользователя';
comment on column users.name is 'Имя пользователя';
comment on column users.birthday is 'Дата рождения';


-- film definition

-- Drop table

-- DROP TABLE film;

create TABLE IF NOT EXISTS film (
	film_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор фильма
	name varchar(150) NOT NULL, -- Название фильма
	description varchar(200) NULL, -- Описание фильма
	releasedate date NOT NULL, -- Дата релиза
	duration int4 NOT NULL, -- Продолжительность фильма
	rating int4, -- Рейтинг
	CONSTRAINT film_pk PRIMARY KEY (film_id),
	CONSTRAINT film_fk FOREIGN KEY (rating) REFERENCES rating(rating_id)
);
comment on table film is 'Фильмы';

-- Column comments

comment on column film.film_id is 'Уникальный идентификатор фильма';
comment on column film.name is 'Название фильма';
comment on column film.description is 'Описание фильма';
comment on column film.releasedate is 'Дата релиза';
comment on column film.duration is 'Продолжительность фильма';
comment on column film.rating is 'Рейтинг';


-- film_genre definition

-- Drop table

-- DROP TABLE film_genre;

create TABLE IF NOT EXISTS film_genre (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор
	film_id int4 NOT NULL, -- Фильм
	genre_id int4 NOT NULL, -- Жанр
	CONSTRAINT film_genre_pk PRIMARY KEY (id),
	CONSTRAINT film_genre_uk UNIQUE (film_id, genre_id),
	CONSTRAINT film_genre_film_fk FOREIGN KEY (film_id) REFERENCES film(film_id),
	CONSTRAINT film_genre_genre_fk FOREIGN KEY (genre_id) REFERENCES genre(genre_id)
);
comment on table film_genre is 'Жанры фильмов';

-- Column comments

comment on column film_genre.id is 'Уникальный идентификатор';
comment on column film_genre.film_id is 'Фильм';
comment on column film_genre.genre_id is 'Жанр';


-- friends definition

-- Drop table

-- DROP TABLE friends;

create TABLE IF NOT EXISTS friends (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор
	user_id int4 NOT NULL, -- Пользователь
	friend_id int4 NOT NULL, -- Друг
	sign_friendship bool NOT NULL DEFAULT false, -- Признак подтверждения дружбы
	CONSTRAINT friends_pk PRIMARY KEY (id),
	CONSTRAINT friends_friend_fk FOREIGN KEY (friend_id) REFERENCES users(user_id),
	CONSTRAINT friends_user_fk FOREIGN KEY (user_id) REFERENCES users(user_id)
);
comment on table friends is 'Друзья';

-- Column comments

comment on column friends.id is 'Уникальный идентификатор';
comment on column friends.user_id is 'Пользователь';
comment on column friends.friend_id is 'Друг';
comment on column friends.sign_friendship is 'Признак подтверждения дружбы';


-- likes definition

-- Drop table

-- DROP TABLE likes;

create TABLE IF NOT EXISTS likes (
	likes_id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор
	film_id int4 NOT NULL, -- Идентификатор фильма
	user_id int4 NOT NULL, -- Идентификатор пользователя
	CONSTRAINT likes_pk PRIMARY KEY (likes_id),
	CONSTRAINT likes_film_fk FOREIGN KEY (film_id) REFERENCES film(film_id),
	CONSTRAINT likes_user_fk FOREIGN KEY (user_id) REFERENCES users(user_id)
);
comment on table likes is 'Лайки';

-- Column comments

comment on column likes.likes_id is 'Уникальный идентификатор';
comment on column likes.film_id is 'Идентификатор фильма';
comment on column likes.user_id is 'Идентификатор пользователя';